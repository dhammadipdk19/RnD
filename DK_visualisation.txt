import matplotlib.pyplot as plt
import numpy as np
from skimage.color import lab2rgb

# Function to convert predicted 'L' and 'ab' channels to an RGB image
def lab_to_rgb(L, ab):
    L = L * 100  # Denormalize L channel from [0, 1] to [0, 100]
    ab = ab * 255 - 128  # Denormalize ab channels from [0, 1] to [-128, 128]

    lab = np.concatenate((L, ab), axis=2)  # Combine L and ab channels
    rgb_img = lab2rgb(lab)  # Convert Lab to RGB
    return rgb_img

# Function to convert RGB images to L, a, and b channels in Lab color space
def rgb_to_lab(images):
    l_channels = []
    ab_channels = []
    for img in images:
        img = img.permute(1, 2, 0).cpu().numpy()  # Convert to HWC format and move to CPU
        lab_image = rgb2lab(img)  # Convert to CIE-Lab

        # Normalize L, a, and b channels
        L_channel = lab_image[:, :, 0] / 100.0  # Normalize L channel to [0, 1]
        a_channel = (lab_image[:, :, 1] + 128) / 255.0  # Normalize a channel to [0, 1]
        b_channel = (lab_image[:, :, 2] + 128) / 255.0  # Normalize b channel to [0, 1]

        l_channels.append(L_channel)
        ab_channels.append(np.stack((a_channel, b_channel), axis=-1))  # Stack a and b

    # Convert to PyTorch tensors
    L = torch.tensor(np.stack(l_channels), dtype=torch.float32).unsqueeze(1).to(device)  # (N, 1, H, W)
    ab = torch.tensor(np.stack(ab_channels), dtype=torch.float32).permute(0, 3, 1, 2).to(device)  # (N, 2, H, W)
    return L, ab

import matplotlib.pyplot as plt
from skimage.color import lab2rgb

def visualize_colorization(model, test_loader, num_images=4):
    model.eval()  # Set the model to evaluation mode

    with torch.no_grad():
        for batch in test_loader:
            images = batch[0].to(device)  # Get the original RGB images
            print(f"Original RGB Images Shape: {images.shape}")  # Debugging statement

            # Get the L and ab channels
            L, ab = rgb_to_lab(images)
            print(f"L Channel Shape: {L.shape}, ab Shape: {ab.shape}")  # Debugging statement

            # L already has shape (N, 1, H, W)
            # No need to change L

            # Predict ab channels from L
            ab_pred = model(L)  # Forward pass with L channel
            print(f"Predicted ab Shape: {ab_pred.shape}")  # Debugging statement

            # Convert the first few images to numpy for visualization
            for i in range(num_images):
                # Prepare the original RGB image
                original_rgb = images[i].cpu().numpy().transpose(1, 2, 0)  # Convert to HWC
                print(f"Original RGB Image Shape: {original_rgb.shape}")  # Debugging statement

                # Prepare the L channel
                L_cpu = L[i].cpu().numpy().squeeze() * 100  # Squeeze to (H, W) and denormalize to [0, 100]
                print(f"L Channel Shape After Squeeze: {L_cpu.shape}")  # Debugging statement

                # Prepare the predicted ab channel
                ab_cpu_pred = ab_pred[i].cpu().numpy() * 255 - 128  # Denormalize predicted ab channels
                print(f"Predicted ab Channel Shape: {ab_cpu_pred.shape}")  # Debugging statement

                # Reshape ab_cpu_pred to (224, 224, 2)
                ab_cpu_pred_reshaped = ab_cpu_pred.transpose(1, 2, 0)  # Change shape to (224, 224, 2)
                print(f"Reshaped Predicted ab Channel Shape: {ab_cpu_pred_reshaped.shape}")  # Debugging statement

                # Create LAB image and convert to RGB
                lab_image = np.concatenate((L_cpu[:, :, np.newaxis], ab_cpu_pred_reshaped), axis=2)  # Concatenate L and ab
                print(f"LAB Image Shape: {lab_image.shape}")  # Debugging statement

                rgb_colorized = lab2rgb(lab_image)  # Convert LAB back to RGB

                # Plot the images
                plt.figure(figsize=(12, 6))
                plt.subplot(1, 3, 1)
                plt.title('Original RGB Image')
                plt.imshow(original_rgb)
                plt.axis('off')

                plt.subplot(1, 3, 2)
                plt.title('L Channel')
                plt.imshow(L_cpu, cmap='gray')
                plt.axis('off')

                plt.subplot(1, 3, 3)
                plt.title('Colorized Image')
                plt.imshow(rgb_colorized)
                plt.axis('off')

                plt.show()

            break  # Remove this if you want to visualize more than one batch

# Testing and visualization
if __name__ == "__main__":
    # Visualize the model's colorization results with original images
    visualize_colorization(model, test_loader, num_images=4)