import torch
import torchvision.transforms as transforms
import torchvision.datasets as datasets
from torch.utils.data import DataLoader, Dataset
import numpy as np
from skimage.color import rgb2lab
from skimage.transform import resize

# Custom Dataset for CIFAR10
class CIFAR10Colorization(Dataset):
    def __init__(self, dataset):
        self.dataset = dataset
        self.input_size = 224  # Target size for pre-trained models

        # Define the transformation to resize images
        self.resize_transform = transforms.Resize((self.input_size, self.input_size))
        self.to_tensor = transforms.ToTensor()

    def __len__(self):
        return len(self.dataset)

    def __getitem__(self, idx):
        # Get the original image from the dataset (RGB format)
        img, _ = self.dataset[idx]

        # Convert PIL image to NumPy array and resize it to the required size (224x224)
        img_resized = np.array(self.resize_transform(img))

        # Convert the resized RGB image to CIE Lab color space
        lab_img = rgb2lab(img_resized).astype(np.float32)

        # Extract the L channel (luminance) and ab channels (chrominance)
        L = lab_img[:, :, 0]  # L channel (luminance)
        ab = lab_img[:, :, 1:]  # ab channels (chrominance)

        # Normalize the L channel to [0, 1]
        L = L / 100.0

        # Normalize the ab channels to [-1, 1]
        ab = (ab + 128) / 255.0 * 2.0 - 1.0

        # Convert L and ab to PyTorch tensors
        L = torch.from_numpy(L).unsqueeze(0)  # Add channel dimension for L
        ab = torch.from_numpy(ab).permute(2, 0, 1)  # Change from HxWx2 to 2xHxW

        return L, ab

# Load the CIFAR10 dataset
train_dataset = datasets.CIFAR10(root='./data', train=True, download=True)

# Create an instance of the CIFAR10Colorization dataset
colorization_dataset = CIFAR10Colorization(train_dataset)

# Create a DataLoader for batching
data_loader = DataLoader(colorization_dataset, batch_size=32, shuffle=True)

# Iterate through the DataLoader (example)
for L, ab in data_loader:
    print(f"Luminance (L) shape: {L.shape}, Chrominance (ab) shape: {ab.shape}")
    break
